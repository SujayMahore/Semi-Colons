const handleDownloadPDF = () => {
  const pdf = new jsPDF("p", "mm", "a4");

  const chartsPromises = dataKeys.map((key, index) => {
    return html2canvas(document.querySelector(`#chart-${index}`)).then((canvas) => {
      const imgData = canvas.toDataURL("image/png");
      const imgWidth = 208;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      pdf.addImage(imgData, "PNG", 0, index * imgHeight, imgWidth, imgHeight);
      return Promise.resolve();
    });
  });

  const tablePromise = html2canvas(tableRef.current).then((canvas) => {
    const imgData = canvas.toDataURL("image/png");
    const imgWidth = 208;
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    pdf.addImage(imgData, "PNG", 0, dataKeys.length * 50, imgWidth, imgHeight);
    return Promise.resolve();
  });

  Promise.all([...chartsPromises, tablePromise]).then(() => {
    pdf.save("download.pdf");
  });
};
